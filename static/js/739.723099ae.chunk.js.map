{"version":3,"file":"static/js/739.723099ae.chunk.js","mappings":"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","sources":["components/appComics/AppComics.js","components/pages/ComicsPage.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport useMarvelService from \"../services/MarvelServic\";\nimport \"./appComics.scss\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst AppComics = () => {\n    const [comics, setComics] = useState([]);\n\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const initialLoadRef = useRef(false); // ← блокируем повторные запросы\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n    useEffect(() => {\n        const controller = new AbortController();\n\n        if (!initialLoadRef.current) {\n            initialLoadRef.current = true; // ← запрос выполнится только один раз\n            onRequest(offset, true, controller.signal);\n        }\n\n        return () => controller.abort();\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset).then(onComicsListLoaded);\n    };\n\n    const onComicsListLoaded = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n            ended = true;\n        }\n        const updatedComics = [...comics, ...newComics];\n        setComics(updatedComics);\n        // setComics((comics) => [...comics, ...newComics]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 8);\n        setCharEnded(ended);\n        // Пробрасываем данные наверх\n        //   onComicsLoaded(updatedComics);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    const comicsItem = comics.map((item) => {\n        const { id, title, thumbnail, price } = item;\n        return (\n            <Link to={`/comics/${id}`} className=\"appcomics__flex-item\">\n                <img\n                    key={id}\n                    src={thumbnail}\n                    alt=\"comics\"\n                    className=\"appcomics__flex-img\"\n                />\n                <div className=\"appcomics__flex-name\">{title}</div>\n                <div className=\"appcomics__flex-price\">{price} $</div>\n            </Link>\n        );\n    });\n\n    return (\n        <section className=\"appcomics\">\n            <div className=\"appcomics__list-flex\">\n                {errorMessage}\n                {spinner}\n                {comicsItem}\n            </div>\n            <div className=\"randomChar__content-buttonBlock\">\n                <button\n                    className=\"button button__long button__main\"\n                    disabled={loading} //кнопка блокировалась во время загрузки\n                    style={{ display: charEnded ? \"none\" : \"block\" }}\n                    onClick={() => onRequest(offset)}\n                >\n                    <div className=\"inner\">LOAD MORE</div>\n                </button>\n            </div>\n        </section>\n    );\n};\n\nexport default AppComics;\n","import AppBanner from \"../appBanner/AppBanner\";\nimport AppComics from \"../appComics/AppComics\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport { useEffect } from \"react\";\n\nimport { Helmet } from \"react-helmet-async\";\nimport \"../../index.scss\";\n\nconst ComicsPage = ({ onComicsLoaded }) => {\n    useEffect(() => {\n        document.title = \"ComicsPage\"; // Явное обновление\n        return () => {\n            document.title = \"\";\n        }; // Очистка при размонтировании\n    }, []);\n\n    return (\n        <>\n            <Helmet>\n                <meta name=\"description\" content=\"Page with comics\" />\n                <title>ComicsPage</title>\n            </Helmet>\n            <ErrorBoundary>\n                <AppBanner />\n                <AppComics onComicsLoaded={onComicsLoaded} />\n            </ErrorBoundary>\n        </>\n    );\n};\n\nexport default ComicsPage;\n","import picture from \"../errorMessage/Z16w.gif\";\n\nconst ErrorMessage = () => {\n    //     return <img src={process.env.PUBLIC_URL + \"/Z16w.gif\"} />;\n    //     кoнструкция применяется если нам нужен статичный файл из папаки public\n\n    return <img className=\"error\" src={picture} alt=\"error\" />;\n};\nexport default ErrorMessage;\n","import avengers from \"../resourses/img/Avengers.png\";\nimport avengersLogo from \"../resourses/img/Avengers_logo.png\";\nimport \"./appBanner.scss\";\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\" />\n            <div className=\"app__banner-text\">\n                New comics every week!\n                <br />\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\" />\n        </div>\n    );\n};\n\nexport default AppBanner;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    //можно обернуть все компоненты которые работают с сетью\n\n    state = {\n        error: false,\n    };\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true,\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n"],"names":["AppComics","comics","setComics","useState","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","initialLoadRef","useRef","loading","error","getAllComics","useMarvelService","useEffect","controller","AbortController","current","onRequest","signal","abort","initial","then","onComicsListLoaded","newComics","ended","length","updatedComics","errorMessage","_jsx","ErrorMessage","spinner","Spinner","comicsItem","map","item","id","title","thumbnail","price","_jsxs","Link","to","className","children","src","alt","disabled","style","display","onClick","_ref","onComicsLoaded","document","_Fragment","Helmet","name","content","ErrorBoundary","AppBanner","picture","avengers","avengersLogo","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","props"],"sourceRoot":""}