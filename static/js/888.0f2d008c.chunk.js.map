{"version":3,"file":"static/js/888.0f2d008c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","components/utils/setContent.js","components/charInfo/CharInfo.js","components/appForm/AppForm.js","components/charList/CharList.js","components/randomChar/RandomChar.js","components/pages/MainPage.js","components/errorBoundary/ErrorBoundary.js"],"sourcesContent":["import picture from \"../errorMessage/Z16w.gif\";\n\nconst ErrorMessage = () => {\n    //     return <img src={process.env.PUBLIC_URL + \"/Z16w.gif\"} />;\n    //     кoнструкция применяется если нам нужен статичный файл из папаки public\n\n    return <img className=\"error\" src={picture} alt=\"error\" />;\n};\nexport default ErrorMessage;\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"skeleton-title\">\n                Please select a character to see information\n            </p>\n            <div className=\"skeleton__wrapper\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    );\n};\n\nexport default Skeleton;\n","import Skeleton from \"../skeleton/Skeleton\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n    // функция для установления контента\n\n    //в зависимости от process будут изменения\n    switch (process) {\n        case \"waiting\":\n            return <Skeleton />;\n            break;\n        case \"loading\":\n            return <Spinner />;\n            break;\n        case \"confirmed\":\n            return <Component data={data} />;\n            break;\n        case \"error\":\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error(\"Error\");\n    }\n};\n\nexport default setContent;\n","import { useEffect, useState, useMemo } from \"react\";\nimport { useContext } from \"react\";\nimport ComicsContext from \"../../context/context\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\"; // ES6\n\nimport useMarvelService from \"../services/MarvelServic\";\n// import Spinner from \"../spinner/Spinner\";\n// import ErrorMessage from \"../errorMessage/ErrorMessage\";\n// import Skeleton from \"../skeleton/Skeleton\";\nimport setContent from \"../utils/setContent\";\nimport \"./charInfo.scss\";\n\nconst CharInfo = ({ charId }) => {\n    const [char, setChar] = useState(null);\n    const {\n        /*error, loading,*/ getCharacter,\n        clearError,\n        process,\n        setProcess,\n    } = useMarvelService();\n\n    useEffect(() => {\n        upDateChar();\n    }, [charId]);\n\n    const upDateChar = () => {\n        if (!charId) {\n            return;\n        }\n        clearError(); //перед тем как делаем новый запрос убираем ошибку\n        getCharacter(charId)\n            .then(onChartLoaded)\n            .then(() => setProcess(\"confirmed\")); //т.е. только тогда когда наши данные установятся в состояние мы подтверждаем\n    };\n\n    const onChartLoaded = (char) => {\n        setChar(char);\n    };\n\n    //     const setContent = (process, char) => {\n    //         // функция для установления контента\n\n    //в зависимости от process будут изменения\n    //         switch (process) {\n    //             case \"waiting\":\n    //                 return <Skeleton />;\n    //                 break;\n    //             case \"loading\":\n    //                 return <Spinner />;\n    //                 break;\n    //             case \"confirmed\":\n    //                 return <View char={char} />;\n    //                 break;\n    //             case \"error\":\n    //                 return <ErrorMessage />;\n    //                 break;\n    //             default:\n    //                 throw new Error(\"Error\");\n    //         }\n    //     };\n\n    //условный рендеринг\n    //     const skeleton = char || loading || error ? null : <Skeleton />; //начальное состояние\n    //     const errorMessage = error ? <ErrorMessage /> : null;\n    //     const spinner = loading ? <Spinner /> : null;\n    //     const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <section className=\"charInfo\">\n            {setContent(process, View, char)}\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n        </section>\n    );\n};\n\n//конструкция проверки типа данных\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n};\n\nconst View = ({ data /*char*/ /*comicsData = []*/ }) => {\n    const { name, thumbnail, description, homepage, wiki, comics } =\n        data; /*char*/ //т.к. в setContent проперти data, а не char\n    const comicsData = useContext(ComicsContext);\n\n    // Создаем словарь для быстрого поиска ID по названию комикса\n    const comicsMap = useMemo(() => {\n        const map = {};\n        comicsData.forEach((comic) => {\n            map[comic.title] = comic.id;\n        });\n        console.log(map);\n        return map;\n    }, [comicsData]);\n\n    //     let imgStyle = { objectFit: \"cover\" };\n    //     if (thumbnail === \".....\") {\n    //         imgStyle = { objectFit: \"contain\" };\n    //     }\n    //     использование: <img\n    //         style={imgStyle}\n    //         src={thumbnail}\n    //         alt={name}\n    //         className=\"randomChar__info-block-img\"\n    //     />;\n\n    return (\n        <>\n            <div className=\"randomChar__info-block\">\n                <img\n                    src={thumbnail}\n                    alt={name}\n                    className=\"randomChar__info-block-img\"\n                />\n                <div className=\"randomChar__content\">\n                    <div className=\"randomChar__content-characters\">{name}</div>\n\n                    <div className=\"randomChar__content-buttonBlock\">\n                        <Link to={homepage} className=\"button button__main\">\n                            <div className=\"inner\">HOMEPAGE</div>\n                        </Link>\n\n                        <Link to={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">WIKI</div>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n            <p className=\"charInfo__content-description\">{description}</p>\n            <h3 className=\"charInfo__content-title\">Comics:</h3>\n            <ul className=\"charInfo__content-comicsList\">\n                {comics.length > 0 ? null : \"There is no comics\"}\n                {comics.map((itemCom, i) => {\n                    if (i > 0) return; //используем только если мало элементов\n                    //   если много, то через обычный цикл используя break\n                    //   и обязательно формировать новый [], а не мутировать предыдущий\n                    const comicId = comicsMap[itemCom];\n                    console.log(comicId);\n                    return (\n                        <li\n                            key={i}\n                            className=\"charInfo__content-comicsList-item\"\n                        >\n                            <Link to={`/comics/${comicId}`}>{itemCom}</Link>\n                        </li>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default CharInfo;\n","import { Link } from \"react-router-dom\";\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage as FormicErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./appForm.scss\";\nimport { useEffect, useState } from \"react\";\nimport useMarvelService from \"../services/MarvelServic\";\n\nconst AppForm = () => {\n    const [charactersData, setCharactersData] = useState([]); // массив персонажей\n    const [searchResult, setSearchResult] = useState(null); // Добавляем состояние для результата поиска\n    const [foundCharacter, setFoundCharacter] = useState(null); // Добавляем состояние для найденного персонажа\n\n    const { getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        const loadCharacters = async () => {\n            try {\n                const data = await getAllCharacters(\"offset\", 20);\n                if (data) setCharactersData(data);\n                else console.error(\"No data received from API\");\n            } catch (err) {\n                console.error(\"Failed to load comics:\", err);\n            }\n        };\n        loadCharacters();\n    }, []);\n\n    const handleSubmit = (values, { setSubmitting }) => {\n        // Проверяем, есть ли персонаж с таким именем\n        const searchCharacter = charactersData.find(\n            (char) => char.name.toLowerCase() === values.search.toLowerCase(),\n        );\n\n        if (searchCharacter) {\n            console.log(\"super - персонаж найден\");\n            setSearchResult(`There is! Visit ${values.search} page?`);\n            setFoundCharacter(searchCharacter); // Сохраняем найденного персонажа\n        } else {\n            console.log(\"bad - персонаж не найден\");\n            setSearchResult(\n                `The character was not found. Check the name and try again`,\n            );\n            setFoundCharacter(null); // Сбрасываем при отсутствии результата\n        }\n\n        setSubmitting(false);\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                search: \"\",\n            }}\n            validationSchema={Yup.object({\n                search: Yup.string().required(\"This field is required\"),\n            })}\n            onSubmit={handleSubmit}\n        >\n            <Form className=\"appform\">\n                <label className=\"appform__name\" htmlFor=\"search\">\n                    Or find a character by name:\n                </label>\n                <div className=\"appform-wrapper\">\n                    <Field\n                        id=\"search\"\n                        className=\"appform__input\"\n                        name=\"search\"\n                        type=\"text\"\n                        placeholder=\"Enter name\"\n                    />\n\n                    <div className=\"randomChar__content-buttonBlock\">\n                        <button type=\"submit\" className=\"button button__main\">\n                            <div className=\"inner\">FIND</div>\n                        </button>\n                    </div>\n                </div>\n                <FormicErrorMessage\n                    className=\"error\"\n                    name=\"search\"\n                    component=\"div\"\n                />\n\n                <div className=\"appform__message\">\n                    {searchResult && (\n                        <>\n                            <div\n                                style={{\n                                    color: foundCharacter\n                                        ? \"#03710e\"\n                                        : \"#9f0013\",\n                                    paddingTop: \"25px\",\n                                    fontWeight: \"700\",\n                                    fontSize: \"18px\",\n                                }}\n                                className=\"search-result\"\n                            >\n                                {searchResult}\n                            </div>\n                            {foundCharacter && (\n                                <Link\n                                    to={`/characters/${foundCharacter.id}`}\n                                    className=\"button button__secondary\"\n                                >\n                                    <div className=\"inner\">TO PAGE</div>\n                                </Link>\n                            )}\n                        </>\n                    )}\n                </div>\n            </Form>\n        </Formik>\n    );\n};\n\nexport default AppForm;\n","import { useEffect, useState, createRef } from \"react\";\nimport useMarvelService from \"../services/MarvelServic\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n    const [char, setChar] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        upDateChars(); //начальное состояние 9 персонажей\n    }, []);\n\n    const upDateChars = () => {\n        getAllCharacters(offset).then((res) => setChar(res), setOffset(9));\n    };\n\n    const onRequest = (offset, initial) => {\n        //дозагрузка\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n        getAllCharacters(offset)\n            .then((newChar) => {\n                let ended = false;\n\n                if (newChar.length < 9 || newChar.length === 0) {\n                    ended = true;\n                }\n                setChar((char) => {\n                    const upDateChar = [...char, ...newChar];\n                    return upDateChar;\n                });\n\n                setOffset((offset) => offset + 9);\n                setCharEnded(ended);\n            })\n\n            .catch((err) => {\n                console.error(\"Ошибка загрузки персонажей:\", err); // 🚨 Логируем ошибку\n            });\n    };\n    const duration = 1000;\n\n    const onFocusItem = (ref) => {\n        ref.current.classList.add(\"charList__selected\");\n        ref.current.focus();\n    };\n\n    const blurOnItem = (ref) => {\n        ref.current.classList.remove(\"charList__selected\");\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    const charitem = char.map((item, i) => {\n        const { thumbnail, name, id } = item;\n        const nodeRef = createRef(null);\n\n        return (\n            <CSSTransition\n                in={true}\n                key={id}\n                timeout={duration}\n                classNames=\"char-anim\"\n                nodeRef={nodeRef}\n            >\n                <li\n                    ref={nodeRef}\n                    tabIndex={0}\n                    className=\"charList__flex-item\"\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        onFocusItem(nodeRef);\n                    }}\n                    onBlur={() => blurOnItem(nodeRef)}\n                    onKeyDown={(e) => {\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            onFocusItem(nodeRef);\n                        }\n                    }}\n                >\n                    <img\n                        src={thumbnail}\n                        alt={name}\n                        className=\"charList__flex-img\"\n                    />\n                    <div className=\"charList__flex-name\">{name}</div>\n                </li>\n            </CSSTransition>\n        );\n    });\n\n    return (\n        <section className=\"charList\">\n            <ul className=\"charList__flex spinner error\">\n                {spinner}\n                {errorMessage}\n                <TransitionGroup component={null} className=\"charList__flex\">\n                    {charitem}\n                </TransitionGroup>\n            </ul>\n            <div className=\"randomChar__content-buttonBlock\">\n                <button\n                    className=\"button button__long button__main\"\n                    disabled={loading} //кнопка блокировалась во время загрузки\n                    style={{ display: charEnded ? \"none\" : \"block\" }}\n                    onClick={() => onRequest(offset)}\n                >\n                    <div className=\"inner\">LOAD MORE</div>\n                </button>\n            </div>\n        </section>\n    );\n};\n\nexport default CharList;\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n};\n\n// при загрузке по средством scroll\n\n// class CharList extends Component {\n//     state = {\n//         char: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 0, //относится к загрузке новых элементов\n//         charEnded: false,\n//     };\n\n//     marvelService = new MarvelService();\n\n//     componentDidMount() {\n//         this.upDateChars(); //первоначальная загрузка\n//         window.addEventListener(\"scroll\", this.onScroll);\n//     }\n\n//     componentWillUnmount() {\n//         window.removeEventListener(\"scroll\", this.onScroll);\n//     }\n\n//     upDateChars = () => {\n//         this.marvelService\n//             .getAllCharacters()\n//             .then((res) => {\n//                 this.setState({ char: res, loading: false, offset: 9 });\n//             })\n//             .catch(() => {\n//                 this.setState({ loading: false, error: true });\n//             });\n//     };\n\n//     onScroll = () => {\n//         const { newItemLoading, charEnded, offset } = this.state;\n//         if (\n//             window.scrollY + document.documentElement.clientHeight >=\n//                 document.documentElement.scrollHeight - 100 &&\n//             !newItemLoading &&\n//             !charEnded\n//         ) {\n//             this.onRequest(offset);\n//         }\n//     };\n\n//     onRequest = (offset) => {\n//         this.onCharListLoading(); //вызываем загрузку\n//         debugger;\n//         this.marvelService\n//             .getAllCharacters(offset)\n//             .then((newChar) => {\n//                 if (newChar.length === 0) {\n//                     this.setState({\n//                         charEnded: true,\n//                         newItemLoading: false,\n//                     });\n//                     return;\n//                 }\n\n//                 let ended = false;\n\n//                 if (newChar.length < 9 || newChar.length === 0) {\n//                     ended = true;\n//                 }\n//                 this.setState(() => ({\n//                     char: [...this.state.char, ...newChar],\n//                     loading: false,\n//                     newItemLoading: false,\n//                     offset: offset + 9,\n//                     charEnded: ended,\n//                 }));\n//             })\n//             .catch(() => {\n//                 this.setState({ loading: false, error: true });\n//             });\n//     };\n\n//     onCharListLoading = () => {\n//         this.setState({ newItemLoading: true });\n//     };\n\n//     render() {\n//         const { char, loading, error } = this.state;\n\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const charitem = char.map((item) => {\n//             const { thumbnail, name, id } = item;\n\n//             return (\n//                 <li\n//                     key={id}\n//                     className=\"charList__flex-item\"\n//                     onClick={() => this.props.onCharSelected(item.id)}\n//                 >\n//                     <img\n//                         src={thumbnail}\n//                         alt={name}\n//                         className=\"charList__flex-img\"\n//                     />\n//                     <div className=\"charList__flex-name\">{name}</div>\n//                 </li>\n//             );\n//         });\n\n//         return (\n//             <section className=\"charList\">\n//                 <ul className=\"charList__flex spinner error\">\n//                     {spinner}\n//                     {errorMessage}\n//                     {charitem}\n//                 </ul>\n//             </section>\n//         );\n//     }\n// }\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../services/MarvelServic\";\n//import Spinner from \"../spinner/Spinner\";\n//import ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport setContent from \"../../components/utils/setContent\";\n\nimport \"./randomChar.scss\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { /*loading, error*/ process, setProcess, getCharacter, clearError } =\n        useMarvelService();\n\n    useEffect(() => {\n        upDateChar();\n        //   const timerId = setInterval(upDateChar, 5000);\n        //   return () => {\n        //       clearInterval(timerId);\n        //   };\n    }, []);\n\n    const onChartLoaded = (char) => {\n        setChar(char);\n    };\n\n    const upDateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (20 - 1) + 1); //конструкция для отображения рандомных чисел\n        getCharacter(id).then(onChartLoaded).then(setProcess(\"confirmed\"));\n    };\n\n    //     const errorMessage = error ? <ErrorMessage /> : null;\n    //     const spinner = loading ? <Spinner /> : null;\n    //     const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <section className=\"randomChar\">\n            {setContent(process, View, char)}\n            {/* {errorMessage}\n            {spinner}\n            {content} */}\n            <div className=\"randomChar__cta-block\">\n                <p className=\"randomChar__cta-block-text\">\n                    Random character for today! <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomChar__cta-block-text randomChar__cta-block-text-second\">\n                    Or choose another one\n                </p>\n                <Link\n                    to=\"/\"\n                    className=\"button button__main randomChar__cta-block-button\"\n                >\n                    <div className=\"inner\" onClick={upDateChar}>\n                        TRY IT\n                    </div>\n                </Link>\n                <div className=\"randomChar__cta-block-decoration\">\n                    <img\n                        className=\"randomChar__cta-block-decoration-shield\"\n                        src={require(\"../resourses/img/shield.png\")}\n                        alt=\"shield\"\n                    />\n                    <img\n                        className=\"randomChar__cta-block-decoration-mjolnir\"\n                        src={require(\"../resourses/img/mjolnir (1).png\")}\n                        alt=\"mjolnir\"\n                    />\n                </div>\n            </div>\n        </section>\n    );\n};\n\nconst View = ({ data }) => {\n    const { name, thumbnail, description, homepage, wiki } = data;\n\n    return (\n        <div className=\"randomChar__info-block\">\n            <img\n                src={thumbnail}\n                alt={name}\n                className=\"randomChar__info-block-img\"\n            />\n            <div className=\"randomChar__content \">\n                <div className=\"randomChar__content-characters\">{name}</div>\n                <p className=\"randomChar__content-text\">{description}</p>\n                <div className=\"randomChar__content-buttonBlock\">\n                    <Link to={homepage} className=\"button button__main\">\n                        <div className=\"inner\">HOMEPAGE</div>\n                    </Link>\n\n                    <Link to={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">WIKI</div>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport AppForm from \"../appForm/AppForm\";\nimport CharList from \"../charList/CharList\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from \"../../components/resourses/img/vision.png\";\n\nimport \"../../index.scss\";\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        //метод для установки свойства selectedChar\n        setChar(id);\n    };\n\n    useEffect(() => {\n        document.title = \"Marvel\"; // Явное обновление\n        return () => {\n            document.title = \"\";\n        }; // Очистка при размонтировании\n    }, []);\n\n    return (\n        <>\n            <Helmet>\n                <meta name=\"description\" content=\"Marvel\" />\n                <title>Marvel</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n\n                <div className=\"char__content-forma\">\n                    <ErrorBoundary>\n                        <CharInfo\n                            charId={selectedChar} //передаем то, что сохранили в состоянии (т.е id)\n                            //     comicsData={comicsData}\n                        />\n                    </ErrorBoundary>\n                    <AppForm\n                    // style={{\n                    //     visibility: \"hidden\",\n                    // }}\n                    />\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    );\n};\nexport default MainPage;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    //можно обернуть все компоненты которые работают с сетью\n\n    state = {\n        error: false,\n    };\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true,\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n"],"names":["ErrorMessage","_jsx","className","src","picture","alt","Skeleton","_jsxs","_Fragment","children","setContent","process","Component","data","Spinner","Error","View","_ref2","name","thumbnail","description","homepage","wiki","comics","comicsData","useContext","ComicsContext","comicsMap","useMemo","map","forEach","comic","title","id","console","log","Link","to","length","itemCom","i","comicId","_ref","charId","char","setChar","useState","getCharacter","clearError","setProcess","useMarvelService","useEffect","upDateChar","then","onChartLoaded","AppForm","charactersData","setCharactersData","searchResult","setSearchResult","foundCharacter","setFoundCharacter","getAllCharacters","async","error","err","loadCharacters","Formik","initialValues","search","validationSchema","Yup","required","onSubmit","handleSubmit","values","setSubmitting","searchCharacter","find","toLowerCase","Form","htmlFor","Field","type","placeholder","FormicErrorMessage","component","style","color","paddingTop","fontWeight","fontSize","props","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","upDateChars","res","onFocusItem","ref","current","classList","add","focus","errorMessage","spinner","charitem","item","nodeRef","createRef","CSSTransition","in","timeout","classNames","tabIndex","onClick","onCharSelected","onBlur","remove","onKeyDown","e","key","TransitionGroup","disabled","display","onRequest","initial","newChar","ended","catch","RandomChar","Math","floor","random","require","MainPage","selectedChar","document","Helmet","content","ErrorBoundary","CharList","CharInfo","decoration","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","render"],"sourceRoot":""}